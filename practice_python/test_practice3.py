from . import practice3

p = practice3.Practice3()

def test_odds_vs_evens():
    assert (p.odds_vs_evens(44547) == 'equal')
    assert (p.odds_vs_evens(412420) == 'even')
    assert (p.odds_vs_evens(128797) == 'odd')
    assert (p.odds_vs_evens(838768) == 'even')
    assert (p.odds_vs_evens(371910) == 'odd')
    assert (p.odds_vs_evens(769431) == 'odd')
    assert (p.odds_vs_evens(221294) == 'equal')
    assert (p.odds_vs_evens(859307) == 'odd')
    assert (p.odds_vs_evens(847617) == 'even')
    assert (p.odds_vs_evens(348466) == 'even')
    assert (p.odds_vs_evens(50236) == 'equal')
    assert (p.odds_vs_evens(133987) == 'odd')
    assert (p.odds_vs_evens(698570) == 'odd')
    assert (p.odds_vs_evens(822406) == 'even')
    assert (p.odds_vs_evens(54313) == 'odd')
    assert (p.odds_vs_evens(17788) == 'even')
    assert (p.odds_vs_evens(72083) == 'equal')
    assert (p.odds_vs_evens(649924) == 'odd')
    assert (p.odds_vs_evens(968740) == 'even')
    assert (p.odds_vs_evens(942674) == 'equal')

def test_matrix():
    assert (p.matrix(3, 4, 0) == [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]])
    assert (p.matrix(2, 3, "#") == [["#", "#", "#"], ["#", "#", "#"]])
    assert (p.matrix(2, 3, -4) == [[-4, -4, -4], [-4, -4, -4]])
    assert (p.matrix(1, 2, 0) == [[0, 0]])

def test_inator_inator():
    assert (p.inator_inator("Shrink") == "Shrinkinator 6000")
    assert (p.inator_inator("Doom") == "Doominator 4000")
    assert (p.inator_inator("EvilClone") == "EvilClone-inator 9000")
    assert (p.inator_inator("Destroy") == "Destroyinator 7000")
    assert (p.inator_inator("a") == "a-inator 1000")
    assert (p.inator_inator("Shrek") == "Shrekinator 5000")
    assert (p.inator_inator("bEE") == "bEE-inator 3000")
    assert (p.inator_inator("CAPITALISE") == "CAPITALISE-inator 10000")
    assert (p.inator_inator("i") == "i-inator 1000")
    assert (p.inator_inator("chu") == "chu-inator 3000")
    assert (p.inator_inator("foo") == "foo-inator 3000")

def test_apocalyptic():
    assert (p.apocalyptic(157) == "Repent! 9 days until the Apocalypse!")
    assert (p.apocalyptic(175) == "Crisis averted. Resume sinning.")
    assert (p.apocalyptic(220) == "Repent! 6 days until the Apocalypse!")
    assert (p.apocalyptic(333) == "Crisis averted. Resume sinning.")
    assert (p.apocalyptic(499) == "Repent! 138 days until the Apocalypse!")
    assert (p.apocalyptic(666) == "Repent! 49 days until the Apocalypse!")
    assert (p.apocalyptic(1003) == "Crisis averted. Resume sinning.")

def test_number_split():
    assert (p.number_split(4) == [2, 2])
    assert (p.number_split(10) == [5, 5])
    assert (p.number_split(11) == [5, 6])
    assert (p.number_split(0) == [0, 0])
    assert (p.number_split(1) == [0, 1])
    assert (p.number_split(-4) == [-2, -2])
    assert (p.number_split(-5) == [-3, -2])
    assert (p.number_split(-9) == [-5, -4])

def test_high_low():
    assert (p.high_low("4 5 29 54 4 0 -214 542 -64 1 -3 6 -6") == "542 -214")
    assert (p.high_low("1 -1") == "1 -1")
    assert (p.high_low("1 1") == "1 1")
    assert (p.high_low("-1 -1") == "-1 -1")
    assert (p.high_low("1 -1 0") == "1 -1")
    assert (p.high_low("1 1 0") == "1 0")
    assert (p.high_low("-1 -1 0") == "0 -1")
    assert (p.high_low("42") == "42 42")

def test_remove_dups():
    assert (p.remove_dups(['John', 'Taylor', 'John']) == ['John', 'Taylor'])
    assert (p.remove_dups(['John', 'Taylor', 'John', 'john']) == ['John', 'Taylor', 'john'])
    assert (p.remove_dups(['javascript', 'python', 'python', 'ruby', 'javascript', 'c', 'ruby']) ==
                       ['javascript', 'python', 'ruby', 'c'])
    assert (p.remove_dups([1, 2, 2, 2, 3, 2, 5, 2, 6, 6, 3, 7, 1, 2, 5]) == [1, 2, 3, 5, 6, 7])
    assert (p.remove_dups(['#', '#', '%', '&', '#', '$', '&']) == ['#', '%', '&', '$'])
    assert (p.remove_dups([3, 'Apple', 3, 'Orange', 'Apple']) == [3, 'Apple', 'Orange'])

def test_numbers_sum():
    assert (p.numbers_sum([1, 2, "13", "4", "645"]) == 3)
    assert (p.numbers_sum([True, False, "123", "75"]) == 0)
    assert (p.numbers_sum([1, 2, 3, 4, 5, True]) == 15)
    assert (p.numbers_sum(["abcd", 1234, False, True, 564, "hii"]) == 1798)
    assert (p.numbers_sum(["abcd", "abc45", "assssd", True]) == 0)
    assert (p.numbers_sum([]) == 0)
    assert (p.numbers_sum(["cghyki", "cd", 12114, 786, True, "me", "bey"]) == 12900)

def test_one_odd_one_even():
    assert (p.one_odd_one_even(10) == True)
    assert (p.one_odd_one_even(11) == False)
    assert (p.one_odd_one_even(12) == True)
    assert (p.one_odd_one_even(13) == False)
    assert (p.one_odd_one_even(14) == True)
    assert (p.one_odd_one_even(15) == False)
    assert (p.one_odd_one_even(16) == True)
    assert (p.one_odd_one_even(17) == False)
    assert (p.one_odd_one_even(18) == True)
    assert (p.one_odd_one_even(19) == False)
    assert (p.one_odd_one_even(20) == False)
    assert (p.one_odd_one_even(21) == True)
    assert (p.one_odd_one_even(22) == False)
    assert (p.one_odd_one_even(23) == True)
    assert (p.one_odd_one_even(24) == False)
    assert (p.one_odd_one_even(25) == True)
    assert (p.one_odd_one_even(26) == False)
    assert (p.one_odd_one_even(27) == True)
    assert (p.one_odd_one_even(28) == False)
    assert (p.one_odd_one_even(29) == True)
    assert (p.one_odd_one_even(30) == True)
    assert (p.one_odd_one_even(31) == False)
    assert (p.one_odd_one_even(32) == True)
    assert (p.one_odd_one_even(33) == False)
    assert (p.one_odd_one_even(34) == True)
    assert (p.one_odd_one_even(35) == False)
    assert (p.one_odd_one_even(36) == True)
    assert (p.one_odd_one_even(37) == False)
    assert (p.one_odd_one_even(38) == True)
    assert (p.one_odd_one_even(39) == False)
    assert (p.one_odd_one_even(40) == False)
    assert (p.one_odd_one_even(41) == True)
    assert (p.one_odd_one_even(42) == False)
    assert (p.one_odd_one_even(43) == True)
    assert (p.one_odd_one_even(44) == False)
    assert (p.one_odd_one_even(45) == True)
    assert (p.one_odd_one_even(46) == False)
    assert (p.one_odd_one_even(47) == True)
    assert (p.one_odd_one_even(48) == False)
    assert (p.one_odd_one_even(49) == True)
    assert (p.one_odd_one_even(50) == True)
    assert (p.one_odd_one_even(51) == False)
    assert (p.one_odd_one_even(52) == True)
    assert (p.one_odd_one_even(53) == False)
    assert (p.one_odd_one_even(54) == True)
    assert (p.one_odd_one_even(55) == False)
    assert (p.one_odd_one_even(56) == True)
    assert (p.one_odd_one_even(57) == False)
    assert (p.one_odd_one_even(58) == True)
    assert (p.one_odd_one_even(59) == False)
    assert (p.one_odd_one_even(60) == False)
    assert (p.one_odd_one_even(61) == True)
    assert (p.one_odd_one_even(62) == False)
    assert (p.one_odd_one_even(63) == True)
    assert (p.one_odd_one_even(64) == False)
    assert (p.one_odd_one_even(65) == True)
    assert (p.one_odd_one_even(66) == False)
    assert (p.one_odd_one_even(67) == True)
    assert (p.one_odd_one_even(68) == False)
    assert (p.one_odd_one_even(69) == True)
    assert (p.one_odd_one_even(70) == True)
    assert (p.one_odd_one_even(71) == False)
    assert (p.one_odd_one_even(72) == True)
    assert (p.one_odd_one_even(73) == False)
    assert (p.one_odd_one_even(74) == True)
    assert (p.one_odd_one_even(75) == False)
    assert (p.one_odd_one_even(76) == True)
    assert (p.one_odd_one_even(77) == False)
    assert (p.one_odd_one_even(78) == True)
    assert (p.one_odd_one_even(79) == False)
    assert (p.one_odd_one_even(80) == False)
    assert (p.one_odd_one_even(81) == True)
    assert (p.one_odd_one_even(82) == False)
    assert (p.one_odd_one_even(83) == True)
    assert (p.one_odd_one_even(84) == False)
    assert (p.one_odd_one_even(85) == True)
    assert (p.one_odd_one_even(86) == False)
    assert (p.one_odd_one_even(87) == True)
    assert (p.one_odd_one_even(88) == False)
    assert (p.one_odd_one_even(89) == True)
    assert (p.one_odd_one_even(90) == True)
    assert (p.one_odd_one_even(91) == False)
    assert (p.one_odd_one_even(92) == True)
    assert (p.one_odd_one_even(93) == False)
    assert (p.one_odd_one_even(94) == True)
    assert (p.one_odd_one_even(95) == False)
    assert (p.one_odd_one_even(96) == True)
    assert (p.one_odd_one_even(97) == False)
    assert (p.one_odd_one_even(98) == True)
    assert (p.one_odd_one_even(99) == False)

def test_emotify():
    assert (p.emotify("Make me smile") == "Make me :D")
    assert (p.emotify("Make me grin") == "Make me :)")
    assert (p.emotify("Make me sad") == "Make me :(")
    assert (p.emotify("Make me mad") == "Make me :P")